{"version":3,"sources":["contexts/ThemeTypeContext.ts","pages/Search.tsx","hooks/useQueryParams.ts","App.tsx","ErrorBoundary.tsx","graphql/index.ts","reportWebVitals.ts","index.tsx"],"names":["ThemeTypeContext","createContext","themeType","toggleThemeType","GET_POKEMON_QUERY","gql","Search","query","URLSearchParams","useLocation","search","history","useHistory","location","queryValue","get","useState","searchTextValue","setSearchTextValue","searchValue","setSearchValue","useContext","useLazyQuery","variables","name","fetch","called","data","error","loading","handleChange","e","target","value","handleSubmit","preventDefault","push","useEffect","Container","Button","onClick","onSubmit","Input","type","inputProps","onChange","placeholder","disabled","Box","CircularProgress","pokemon","src","image","alt","Typography","variant","component","types","join","resistant","fleeRate","maxCP","weaknesses","classification","weight","minimum","maximum","height","evolutionRequirements","amount","Grid","container","evolutions","map","evolution","i","to","Avatar","renderSearchResult","App","path","ErrorBoundary","state","hasError","errorInfo","console","this","props","children","_","Component","client","ApolloClient","uri","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Root","prefersDarkMode","useMediaQuery","setThemeType","theme","React","useMemo","createMuiTheme","palette","Provider","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ec6018d.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { PaletteType } from \"@material-ui/core\";\n\nconst ThemeTypeContext = createContext({\n  themeType: \"light\" as PaletteType,\n  toggleThemeType: () => {},\n});\n\nexport default ThemeTypeContext;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nimport {\n  Container,\n  Grid,\n  Box,\n  Input,\n  CircularProgress,\n  Typography,\n  Avatar,\n  Button,\n} from \"@material-ui/core\";\n\nimport { IPokemon } from \"../interfaces/pokemon\";\nimport useQueryParams from \"../hooks/useQueryParams\";\nimport ThemeTypeContext from \"../contexts/ThemeTypeContext\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nexport const GET_POKEMON_QUERY = gql`\n  query pokemon($name: String!) {\n    pokemon(name: $name) {\n      id\n      number\n      name\n      weight {\n        minimum\n        maximum\n      }\n      height {\n        minimum\n        maximum\n      }\n      classification\n      types\n      resistant\n      weaknesses\n      fleeRate\n      maxCP\n      maxHP\n      image\n      evolutionRequirements {\n        amount\n        name\n      }\n      evolutions {\n        name\n        image\n      }\n    }\n  }\n`;\n\nexport default function Search() {\n  const query = useQueryParams();\n  const history = useHistory();\n  const location = useLocation();\n  const queryValue = query.get(\"name\");\n  const [searchTextValue, setSearchTextValue] = useState(\"\");\n  const [searchValue, setSearchValue] = useState(\"\");\n  const { themeType, toggleThemeType } = useContext(ThemeTypeContext);\n\n  const [fetch, { called, data, error, loading }] = useLazyQuery<{\n    pokemon: IPokemon;\n  }>(GET_POKEMON_QUERY, {\n    variables: { name: searchValue },\n  });\n\n  useEffect(() => {\n    if (queryValue) {\n      setSearchTextValue(queryValue);\n      setSearchValue(queryValue);\n      fetch();\n    }\n  }, [location, fetch, queryValue]);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setSearchTextValue(e.target.value);\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n\n    if (searchTextValue !== searchValue) {\n      history.push(`/?name=${searchTextValue}`);\n    }\n    setSearchValue(searchTextValue);\n  }\n\n  function renderSearchText() {\n    return (\n      <form onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"search\"\n          inputProps={{ \"aria-label\": \"name-input\" }}\n          onChange={handleChange}\n          placeholder=\"Pokemon name\"\n          value={searchTextValue}\n          disabled={loading}\n        />\n        <Input\n          type=\"submit\"\n          value=\"Search\"\n          inputProps={{ \"aria-label\": \"search-button\" }}\n          disabled={loading}\n        />\n      </form>\n    );\n  }\n\n  function renderSearchResult() {\n    if (!called) {\n      return <div>Input pokemon name to search</div>;\n    }\n\n    if (loading) {\n      return (\n        <Box>\n          Searching...\n          <CircularProgress />\n        </Box>\n      );\n    }\n\n    if (error) {\n      return <div>error</div>;\n    }\n\n    if (!data || !data.pokemon) {\n      return <div>Not found</div>;\n    }\n\n    const { pokemon } = data;\n\n    return (\n      <Box>\n        <img src={pokemon.image || \"\"} alt={pokemon.name || \"\"} />\n        <Typography variant=\"h5\" component=\"h2\">\n          {pokemon.name}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Types: {pokemon.types?.join(\" \") || \"\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Resistant(s): {pokemon.resistant?.join(\" \") || \"\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          FleeRate: {pokemon.fleeRate || \"\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          MaxCP: {pokemon.maxCP || \"\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Weakness(es): {pokemon.weaknesses?.join(\" \") || \"-\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Classification: {pokemon.classification || \"-\"}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Weight: {`${pokemon.weight?.minimum} - ${pokemon.weight?.maximum}`}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Height: {`${pokemon.height?.minimum} - ${pokemon.height?.maximum}`}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Evolution Requirement:{\" \"}\n          {`${pokemon.evolutionRequirements?.amount || \"\"} ${\n            pokemon.evolutionRequirements?.name || \"\"\n          }`}\n        </Typography>\n        <Typography variant=\"body2\" component=\"div\">\n          <Grid container>\n            Evolution(s):\n            {pokemon.evolutions?.map((evolution, i) => (\n              <Link\n                key={`evolution-${evolution?.name}-${i}`}\n                to={`/?name=${evolution.name}`}\n              >\n                <Avatar\n                  alt={evolution.name || \"\"}\n                  src={evolution.image || \"\"}\n                />\n              </Link>\n            )) || \" -\"}\n          </Grid>\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Container>\n      <Button onClick={toggleThemeType}>{themeType}</Button>\n      {renderSearchText()}\n      {renderSearchResult()}\n    </Container>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport default function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { Switch, Route } from \"react-router-dom\";\n\nimport Search from \"./pages/Search\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <Search />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <h1>Sorry.. there was an error</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst uri = \"https://graphql-pokemon2.vercel.app\";\n\nexport const client = new ApolloClient({\n  uri,\n  cache: new InMemoryCache(),\n});\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n  CssBaseline,\n  PaletteType,\n} from \"@material-ui/core\";\n\nimport App from \"./App\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { client } from \"./graphql\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ThemeTypeContext from \"./contexts/ThemeTypeContext\";\n\nfunction Root() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const [themeType, setThemeType] = useState<PaletteType>(\"light\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: themeType,\n        },\n      }),\n    [themeType]\n  );\n\n  React.useMemo(() => {\n    setThemeType(prefersDarkMode ? \"dark\" : \"light\");\n  }, [prefersDarkMode]);\n\n  function toggleThemeType() {\n    setThemeType(themeType === \"light\" ? \"dark\" : \"light\");\n  }\n\n  return (\n    <Router>\n      <ThemeTypeContext.Provider value={{ themeType, toggleThemeType }}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <ApolloProvider client={client}>\n            <App />\n          </ApolloProvider>\n        </ThemeProvider>\n      </ThemeTypeContext.Provider>\n    </Router>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <Root />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}